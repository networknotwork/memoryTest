{"version":3,"sources":["components/TilesApp.js","components/wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["MemoryTiles","props","react_default","a","createElement","className","role","id","onClick","memoryCheck","src","image","alt","name","Wrapper","children","memoryCards","App","state","tiles","score","topScore","includes","_this","setState","sort","Math","random","console","log","push","_this2","this","wrapper_Wrapper","map","tile","TilesApp","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+iBAgBeA,MAbf,SAAqBC,GACjB,OACIC,EAAAC,EAAAC,cAAA,OACIC,UAAU,OACVC,KAAK,MACLC,GAAIN,EAAMM,GACVC,QAAS,kBAAMP,EAAMQ,YAAYR,EAAMM,MAEvCL,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,MAAOC,IAAKX,EAAMY,sBCJ/BC,MAJf,SAAiBb,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMc,WCIvCC,EAAc,GAmDHC,6MAhDbC,MAAQ,CACNC,MAAOA,EACPC,MAAO,EACPC,SAAU,KAEZZ,YAAc,SAAAF,GACPS,EAAYM,SAASf,IAQxBS,EAAc,GACdO,EAAKC,SAAS,CACZJ,MAAO,EACPC,SAAUE,EAAKL,MAAME,MACrBD,MAAOI,EAAKL,MAAMC,MAAMM,KAAK,kBAAKC,KAAKC,SAAW,OAEpDC,QAAQC,IAAIb,KAbZA,EAAYc,KAAKvB,GACjBgB,EAAKC,SAAS,CACZJ,MAAOG,EAAKL,MAAME,MAAM,EACxBD,MAAOI,EAAKL,MAAMC,MAAMM,KAAK,kBAAKC,KAAKC,SAAW,OAEpDC,QAAQC,IAAIb,EAAc,MAAQO,EAAKL,MAAME,iFAWxC,IAAAW,EAAAC,KACP,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,qDACHF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,oBAAY4B,KAAKd,MAAME,MAAvB,iBAA4CY,KAAKd,MAAMG,WAEzDnB,EAAAC,EAAAC,cAAC6B,EAAD,KACGD,KAAKd,MAAMC,MAAMe,IAAI,SAAAC,GAAI,OACxBjC,EAAAC,EAAAC,cAACgC,EAAD,CACE7B,GAAI4B,EAAK5B,GACT8B,IAAKF,EAAK5B,GACVM,KAAMsB,EAAKtB,KACXF,MAAOwB,EAAKxB,MACZF,YAAasB,EAAKtB,yBAxCd6B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a942f492.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./tileStyle.css\";\r\n\r\nfunction MemoryTiles(props) {\r\n    return (\r\n        <div\r\n            className=\"tile\"\r\n            role=\"img\"\r\n            id={props.id}\r\n            onClick={() => props.memoryCheck(props.id)}\r\n        >\r\n            <img src={props.image} alt={props.name} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemoryTiles;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport MemoryTiles from \"./components/TilesApp\";\nimport tiles from \"./tiles.json\";\nimport Wrapper from \"./components/wrapper/Wrapper\";\n\n\n\nlet memoryCards = [];\n\nclass App extends Component {\n  state = {\n    tiles: tiles,\n    score: 0,\n    topScore: 0\n  };\n  memoryCheck = id => {\n    if (!memoryCards.includes(id)) {\n      memoryCards.push(id);\n      this.setState({\n        score: this.state.score+1,\n        tiles: this.state.tiles.sort(()=> Math.random() - .5)\n      })\n      console.log(memoryCards + \" : \" + this.state.score);\n    } else {\n      memoryCards = [];\n      this.setState({\n        score: 0,\n        topScore: this.state.score,\n        tiles: this.state.tiles.sort(()=> Math.random() - .5)\n      })\n      console.log(memoryCards);\n    }\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <div>\n          <h1>Memory Test</h1>\n          <p><strong>Rules: Click on each picture once.</strong></p>\n          <hr />\n          <h3>Score: {this.state.score} | Top Score: {this.state.topScore}</h3>\n        </div>\n        <Wrapper>\n          {this.state.tiles.map(tile => (\n            <MemoryTiles\n              id={tile.id}\n              key={tile.id}\n              name={tile.name}\n              image={tile.image}\n              memoryCheck={this.memoryCheck}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}